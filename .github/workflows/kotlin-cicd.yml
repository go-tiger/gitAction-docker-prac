name: Kotlin CI/CD

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 21
        uses: actions/setup-java@v4.2.1
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile-kotlin
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/kotlin-docker-test:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Connect to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd /home/gotiger/site/kotlin-test

            # Docker Hub 로그인
            echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

            # 이미지 풀링
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/kotlin-docker-test:latest

            # 새로운 이미지를 Green/Blue 중 하나로 태그
            if docker ps | grep app_kotlin_blue; then
              NEW_DEPLOYMENT="green"
              OLD_DEPLOYMENT="blue"
            else
              NEW_DEPLOYMENT="blue"
              OLD_DEPLOYMENT="green"
            fi

            docker tag ${{ secrets.DOCKER_HUB_USERNAME }}/kotlin-docker-test:latest ${{ secrets.DOCKER_HUB_USERNAME }}/kotlin-docker-test:$NEW_DEPLOYMENT

            docker-compose up -d app_kotlin_$NEW_DEPLOYMENT

            # 새 컨테이너가 시작될 시간을 기다림
            sleep 10

            # Nginx 설정 변경
            if [ "$NEW_DEPLOYMENT" == "green" ]; then
              sed -i "s/proxy_pass http:\/\/app_kotlin_$OLD_DEPLOYMENT:8080;/proxy_pass http:\/\/app_kotlin_$NEW_DEPLOYMENT:8080;/" /home/gotiger/nginx/conf.d/kotlin-test.conf
            else
              sed -i "s/proxy_pass http:\/\/app_kotlin_$OLD_DEPLOYMENT:8080;/proxy_pass http:\/\/app_kotlin_$NEW_DEPLOYMENT:8080;/" /home/gotiger/nginx/conf.d/kotlin-test.conf
            fi

            # Nginx 재시작
            docker-compose -f /home/gotiger/docker-compose-multi.yml up -d --force-recreate --no-deps nginx

            # 이전 버전의 컨테이너 중지 및 제거
            docker-compose stop app_kotlin_$OLD_DEPLOYMENT
            docker-compose rm -f app_kotlin_$OLD_DEPLOYMENT
